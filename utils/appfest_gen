#!/usr/bin/env escript

-mode(compile).

-define(ALLOWED_ARGS_WITH_DEFAULTS,
        [
         {out, "output.json"}, %% JSON output filename
         {physical_hosts, 2}, %% physical hosts
         {physical_ports, 4}, %% physical ports per ph
         {ofp_ports, 4}, %% OpenFlow ports per vh with LNICX
         {virtual_hosts, 1} %% virtual hosts per ph apart from vh with LINCX
        ]).
-define(NULL, <<"null">>).

main(Args0) ->
    setup(),
    Args1 = parse_args(Args0, ?ALLOWED_ARGS_WITH_DEFAULTS),
    io:format(">> Running with args: ~p~n", [Args1]),
    publish_appfest_topo(Args1),
    common_gen:export_to_json(arg(out, Args1)).

parse_args([ArgName0, ArgValue | Rest], Defaults) ->
    %% we want to strip first character which is '-'
    ArgName1 = list_to_atom(tl(ArgName0)),
    proplists:is_defined(ArgName1, Defaults) orelse throw({bad_start_arg,
                                                           ArgName1}),
    case ArgName1 of
        out ->
            parse_args(Rest, [{ArgName1, ArgValue}
                              | proplists:delete(ArgName1, Defaults)]);
        _ ->
            parse_args(Rest, [{ArgName1, list_to_integer(ArgValue)}
                              | proplists:delete(ArgName1, Defaults)])
    end;
parse_args([], Args) ->
    Args.

arg(Name, Args) ->
    proplists:get_value(Name, Args).

publish_appfest_topo(Args) ->
    PhPorts0 = [begin
                  PhId = publish_ph_id(N),
                  publish_ph(PhId, Args)
                end || N <- lists:seq(1, arg(physical_hosts, Args))],
    PhPorts1 = lists:flatten(PhPorts0),
    set_unwired_patchp(PatchpId = publish_patchp_id(<<>>), PhPorts1),
    [publish_part_of_link(PatchpId, Id) || Id <- PhPorts1].

publish_ph(PhId, Args) ->
    PhPorts = publish_ph_ports(PhId, Args),
    LincxVifs = publish_lincx_vh(PhId, Args),
    VmsVifs = publish_vms(PhId, Args),
    set_unwired_patchp(PatchpId = publish_patchp_id(PhId),
                       Ports = PhPorts ++ LincxVifs ++ VmsVifs),
    [publish_part_of_link(PatchpId, Id) || Id <- Ports],
    PhPorts.

publish_ph_ports(PhId, Args) ->
    [begin
         PpId = publish_pp_id(PhId, N),
         VpId = publish_xenbr_vp_id(PhId, N),
         [publish_part_of_link(PpId, Id) || Id <- [PhId, VpId]],
         PpId
     end || N <- lists:seq(1, arg(physical_ports, Args))].

%% OFS: Internal functions

publish_lincx_vh(PhId, Args) ->
    VhId = publish_vh_id(PhId, _VhNo = 1),
    publish_part_of_link(PhId, VhId),
    PatchpId = publish_patchp_id(VhId),
    {Ofps, Vps, Vifs} = publish_ofs(PhId, VhId, PatchpId, Args),
    set_wired_patchp(PatchpId, lists:zip(Ofps, Vps)),
    Vifs.

publish_ofs(PhId, VhId, PatchpId, Args) ->
    OfsId = publish_ofs_id(VhId, _OfsNo = 1),
    BoundedPorts =
        [begin
             OfpId = publish_ofp_id(OfsId, N),
             VpId = publish_vp_id(VhId, N),
             VifId = publish_vif_id(PhId, _PrefixN = 1, N),
             [publish_part_of_link(OfpId, Id) || Id <- [OfsId, PatchpId]],
             [publish_part_of_link(VpId, Id) || Id <- [VhId, PatchpId]],
             [publish_bound_to_link(VpId, Id) || Id <- [OfpId, VifId]],
             {OfpId, VpId, VifId}
         end || N <- lists:seq(1, arg(ofp_ports, Args))],
    lists:unzip3(BoundedPorts).

%% VM: Internal functions

publish_vms(PhId, Args) ->
    [begin
         %% VH numbers for VMs start from 2
         VhNo = N + 1,
         VmId = publish_vm_id(PhId, VhNo),
         publish_part_of_link(PhId, VmId),
         VpId = publish_vm_vp_with_ep(VmId, publish_patchp_id(VmId)),
         publish_part_of_link(VmId, VpId),
         VifId = publish_vif_id(PhId, VhNo, _VifSuffix = 1),
         publish_bound_to_link(VifId, VpId),
         VifId
     end || N <- lists:seq(1, arg(virtual_hosts, Args))].

publish_vm_vp_with_ep(VmId, PatchpId) ->
    publish_part_of_link(VpId = publish_vp_id(VmId, _VPNo = 0), PatchpId),
    publish_part_of_link(EpId = publish_ep_id(VmId, _EpNo = 1), PatchpId),
    publish_bound_to_link(VpId, EpId),
    set_wired_patchp(PatchpId, [{EpId, VpId}]),
    VpId.

%% Internal functions: helpers

setup() ->
    {ok, common_gen} = compile:file("utils/common_gen"),
    common_gen:setup().

publish_patchp_id(Prefix) ->
    PatchpId = id(Prefix, "PatchP"),
    publish_id(common_gen:id_lm_patchp(PatchpId, #{})).

publish_part_of_link(A, B) ->
    common_gen:publish(A, B, common_gen:lk_part_of_md()).

publish_bound_to_link(A, B) ->
    common_gen:publish(A, B, common_gen:lk_bound_to_md()).

publish_ph_id(N) ->
    PhId = list_to_binary(io_lib:format("PH~p", [N])),
    publish_id(common_gen:id_lm_ph(PhId)).

publish_pp_id(Prefix, N) ->
    PpId = id(Prefix, "PP~p", [N]),
    publish_id(common_gen:id_lm_pp(PpId)).

publish_vp_id(Prefix, N) ->
    VpId = id(Prefix, "VP~p", [N]),
    publish_id(common_gen:id_lm_vp(VpId)).

publish_xenbr_vp_id(Prefix, N) ->
    VpId = id(Prefix, "xenbr~p", [N]),
    publish_id(common_gen:id_lm_vp(VpId)).

publish_vh_id(Prefix, N) ->
    VhId  = id(Prefix, "VH~p", [N]),
    publish_id(common_gen:id_lm_vh(VhId)).

publish_ofs_id(Prefix, N) ->
    OfsId = id(Prefix, "OFS~p", [N]),
    publish_id(common_gen:id_lm_of_switch(OfsId)).

publish_ofp_id(Prefix, N) ->
    OfpId = id(Prefix, "OFP~p", [N]),
    publish_id(common_gen:id_lm_of_port(OfpId)).

publish_vif_id(Prefix, PrefixN, N) ->
    VifId = id(Prefix, "VP~p.~p", [PrefixN, N]),
    publish_id(common_gen:id_lm_vp(VifId)).

publish_vm_id(Prefix, N) ->
    VmId = id(Prefix, "VH~p", [N]),
    publish_id(common_gen:id_lm_vh(VmId)).

publish_ep_id(Prefix, N) ->
    EpId = id(Prefix, "EP~p", [N]),
    publish_id(common_gen:id_endpoint(EpId)).

publish_id({Name, _Md} = Id) ->
    common_gen:publish(Id),
    Name.

set_unwired_patchp(PatchPId, Ports) ->
    Wires = lists:foldl(fun(PortId, AccMap) ->
                                maps:put(PortId, ?NULL, AccMap)
                        end, #{}, Ports),
    update_patchp_wires_md(PatchPId, Wires).

set_wired_patchp(PatchpId, PortsPairs) ->
    Wires = lists:foldl(fun({Ofp, Vp}, Acc0) ->
                                Acc1 = maps:put(Ofp, Vp, Acc0),
                                maps:put(Vp, Ofp, Acc1)
                        end, #{}, PortsPairs),
    update_patchp_wires_md(PatchpId, Wires).

update_patchp_wires_md(PatchPId, Wires) ->
    common_gen:publish(PatchPId, common_gen:merge_patchp_wires_md(Wires)).

id(PrefixBin, SuffixPattern, Args) when PrefixBin =:= <<>> ->
    list_to_binary(io_lib:format(SuffixPattern, Args));
id(PrefixBin, SuffixPattern, Args) ->
    SuffixBin = list_to_binary(io_lib:format(SuffixPattern, Args)),
    <<PrefixBin/binary, "/", SuffixBin/binary>>.

id(PrefixBin, Suffix) ->
    id(PrefixBin, Suffix, []).
