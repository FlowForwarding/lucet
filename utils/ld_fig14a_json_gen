#!/usr/bin/env escript

main([Filename]) ->
    publish_fig_14_A(Filename, 2);
main([Filename, NPortsS]) ->
    publish_fig_14_A(Filename, list_to_integer(NPortsS)).

%% @doc Generates a json file for a figure 14 A in Lucet desgin doc.
%%
%% The doc is here:
%% https://docs.google.com/document/d/1Gtoi8IX1EN3oWDRPTFa_VltOdJAwRbl_ChAZWk8oKIk/edit#heading=h.t814rryc9eo
%% The json file can be imported into Dobby.
%%
%% If NPorts is greater than 2, generate a corresponding graph with more ports.
publish_fig_14_A(Filename, NPorts) ->
    setup(),
    Ph1PatchP = endpoints_with_ph1(NPorts),
    VifPorts = vh1(NPorts),
    [
     common_gen:publish(VifLmVp, Ph1PatchP, common_gen:lk_part_of_md())
     || VifLmVp <- VifPorts
    ],
    Wires = maps:from_list([{P, <<"null">>} || P <- VifPorts]),
    common_gen:publish(Ph1PatchP, common_gen:merge_patchp_wires_md(Wires)),
    common_gen:export_to_json(Filename).

endpoints_with_ph1(NPorts) ->
    common_gen:publish(common_gen:id_lm_ph(LmPh = <<"PH1">>)),
    %% Note the "PatchP" suffix; identifiers have to be unique
    common_gen:publish(common_gen:id_lm_patchp(LmPatchP = <<"PH1/PatchP">>,
                                               #{})),
    PhysicalPorts = [begin
                         LmVp = list_to_binary(io_lib:format("PH1/xenbr~p",[N])),
                         LmPp = list_to_binary(io_lib:format("PH1/PP~p",[N])),
                         Ep = list_to_binary(io_lib:format("Pi~p",[N])),
                         common_gen:publish(common_gen:id_lm_vp(LmVp),
                                            common_gen:id_lm_pp(LmPp),
                                            common_gen:lk_part_of_md()),
                         common_gen:publish(LmPp,
                                            common_gen:id_endpoint(Ep),
                                            common_gen:lk_endpoint_md()),
                         common_gen:publish(LmPp, LmPh,
                                            common_gen:lk_part_of_md()),
                         common_gen:publish(LmPp, LmPatchP,
                                            common_gen:lk_part_of_md()),
                         LmPp
                     end || N <- lists:seq(1, NPorts)],
    Wires = maps:from_list([{P, <<"null">>} || P <- PhysicalPorts]),
    common_gen:publish(LmPatchP, [{<<"wires">>, Wires}]),
    LmPatchP.

vh1(NPorts) ->
    common_gen:publish(common_gen:id_lm_vh(LmVh = <<"PH1/VH1">>)),
    %% Note the "PatchP" suffix; identifiers have to be unique
    common_gen:publish(common_gen:id_lm_patchp(LmPatchP = <<"PH1/VH1/PatchP">>,
                                               #{})),
    common_gen:publish(common_gen:id_lm_of_switch(LmOfSwitch = <<"PH1/VH1/OFS1">>)),
    [begin
         VifLmVp = list_to_binary(io_lib:format("PH1/VP1.~p",[N])),
         LmVp = list_to_binary(io_lib:format("PH1/VH1/VP~p",[N])),
         LmOfPort = list_to_binary(io_lib:format("PH1/VH1/OFS1/OFP~p",[N])),
         %% part of
         common_gen:publish(common_gen:id_lm_vp(LmVp), LmPatchP,
                            common_gen:lk_part_of_md()),
         common_gen:publish(LmVp, LmVh, common_gen:lk_part_of_md()),
         common_gen:publish(common_gen:id_lm_of_port(LmOfPort), LmPatchP,
                            common_gen:lk_part_of_md()),
         common_gen:publish(LmOfPort, LmOfSwitch, common_gen:lk_part_of_md()),
         %% bound to
         common_gen:publish(common_gen:id_lm_vp(VifLmVp), LmVp,
                            common_gen:lk_bound_to_md()),
         common_gen:publish(LmVp, LmOfPort, common_gen:lk_bound_to_md()),
         VifLmVp
     end || N <- lists:seq(1, NPorts)].


%% Internal functions

setup() ->
    {ok, common_gen} = compile:file("utils/common_gen"),
    common_gen:setup().
